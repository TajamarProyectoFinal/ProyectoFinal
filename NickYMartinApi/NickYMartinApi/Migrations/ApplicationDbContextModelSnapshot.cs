// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NickYMartinApi.Data;

#nullable disable

namespace NickYMartinApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NickYMartinApi.Models.Carrito", b =>
                {
                    b.Property<Guid>("IdCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdCarrito");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            IdCategoria = new Guid("1a2b3c4d-5e6f-4a7b-8c9d-0e1f2a3b4c5d"),
                            Nombre = "Ropa"
                        },
                        new
                        {
                            IdCategoria = new Guid("b2c3d4e5-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            Nombre = "Calzado"
                        },
                        new
                        {
                            IdCategoria = new Guid("c3d4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            Nombre = "Accesorios"
                        },
                        new
                        {
                            IdCategoria = new Guid("d4e5f6a7-8b9c-0d1e-2f3a-4b5c6d7e8f9a"),
                            Nombre = "Hogar"
                        },
                        new
                        {
                            IdCategoria = new Guid("e5f6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b"),
                            Nombre = "Libros"
                        },
                        new
                        {
                            IdCategoria = new Guid("f6a7b8c9-0d1e-2f3a-4b5c-6d7e8f9a0b1c"),
                            Nombre = "Tecnología"
                        },
                        new
                        {
                            IdCategoria = new Guid("a7b8c9d0-1e2f-3a4b-5c6d-7e8f9a0b1c2d"),
                            Nombre = "Electrónica"
                        },
                        new
                        {
                            IdCategoria = new Guid("b8c9d0e1-2f3a-4b5c-6d7e-8f9a0b1c2d3e"),
                            Nombre = "Deportes"
                        },
                        new
                        {
                            IdCategoria = new Guid("c9d0e1f2-3a4b-5c6d-7e8f-9a0b1c2d3e4f"),
                            Nombre = "Belleza"
                        },
                        new
                        {
                            IdCategoria = new Guid("d0e1f2a3-4b5c-6d7e-8f9a-0b1c2d3e4f5a"),
                            Nombre = "Joyería"
                        });
                });

            modelBuilder.Entity("NickYMartinApi.Models.Comentario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComentarioPadreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComentarioPadreId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("NickYMartinApi.Models.DetallesPedidos", b =>
                {
                    b.Property<Guid>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("IdPedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetalle");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetallesPedidos");

                    b.HasData(
                        new
                        {
                            IdDetalle = new Guid("4e3d2c1b-a0f9-8e7d-6c5b-4a3f2e1d0c9b"),
                            Cantidad = 2,
                            IdPedido = new Guid("2f3e4d5c-6b7a-8f9e-0d1c-2b3a4f5e6d7c"),
                            IdProducto = new Guid("c8d9e0f1-2a3b-4c5d-8e6f-9a0b1c2d3e4f"),
                            PrecioUnitario = 19.99m,
                            Subtotal = 39.98m
                        },
                        new
                        {
                            IdDetalle = new Guid("8a9b0c1d-2e3f-4a5b-6c7d-8e9f0a1b2c3d"),
                            Cantidad = 1,
                            IdPedido = new Guid("2f3e4d5c-6b7a-8f9e-0d1c-2b3a4f5e6d7c"),
                            IdProducto = new Guid("b0a9c8d7-1f2e-3a4b-5c6d-7e8f9a0b1c2d"),
                            PrecioUnitario = 12.50m,
                            Subtotal = 12.50m
                        },
                        new
                        {
                            IdDetalle = new Guid("f6e5d4c3-b2a1-0e9d-8c7b-6a5f4e3d2c1b"),
                            Cantidad = 1,
                            IdPedido = new Guid("d0c1e2f3-a4b5-c6d7-e8f9-a0b1c2d3e4f5"),
                            IdProducto = new Guid("f2e3d4c5-6b7a-8d9e-0c1f-2a3b4c5d6e7f"),
                            PrecioUnitario = 49.99m,
                            Subtotal = 49.99m
                        },
                        new
                        {
                            IdDetalle = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d"),
                            Cantidad = 1,
                            IdPedido = new Guid("d0c1e2f3-a4b5-c6d7-e8f9-a0b1c2d3e4f5"),
                            IdProducto = new Guid("f4e5d6c7-8b9a-0c1d-2e3f-4a5b6c7d8e9f"),
                            PrecioUnitario = 69.99m,
                            Subtotal = 69.99m
                        });
                });

            modelBuilder.Entity("NickYMartinApi.Models.Direccion", b =>
                {
                    b.Property<Guid>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("principal")
                        .HasColumnType("bit");

                    b.HasKey("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Direcciones");

                    b.HasData(
                        new
                        {
                            IdDireccion = new Guid("2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            Ciudad = "Madrid",
                            CodigoPostal = 28080,
                            Domicilio = "Avenida Siempreviva 742",
                            IdUsuario = new Guid("a9b8c7d6-2e3f-4a5b-8c9d-1e2f3a4b5c6d"),
                            Pais = "España",
                            Provincia = "Madrid",
                            principal = true
                        },
                        new
                        {
                            IdDireccion = new Guid("3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            Ciudad = "Barcelona",
                            CodigoPostal = 8001,
                            Domicilio = "Calle de la Piruleta 15",
                            IdUsuario = new Guid("a9b8c7d6-2e3f-4a5b-8c9d-1e2f3a4b5c6d"),
                            Pais = "España",
                            Provincia = "Barcelona",
                            principal = false
                        });
                });

            modelBuilder.Entity("NickYMartinApi.Models.Favorito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Favoritos");
                });

            modelBuilder.Entity("NickYMartinApi.Models.ItemCarrito", b =>
                {
                    b.Property<Guid>("IdItemCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCarrito")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdItemCarrito");

                    b.HasIndex("IdCarrito");

                    b.HasIndex("IdProducto");

                    b.ToTable("ItemsCarrito");
                });

            modelBuilder.Entity("NickYMartinApi.Models.MultimediaProducto", b =>
                {
                    b.Property<Guid>("IdMultimedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreArchivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMultimedia");

                    b.HasIndex("IdProducto");

                    b.ToTable("MultimediaProductos");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Pedido", b =>
                {
                    b.Property<Guid>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdDireccion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            IdPedido = new Guid("2f3e4d5c-6b7a-8f9e-0d1c-2b3a4f5e6d7c"),
                            Estado = "Pendiente",
                            FechaCreacion = new DateTime(2025, 6, 17, 14, 15, 40, 288, DateTimeKind.Local).AddTicks(7894),
                            IdDireccion = new Guid("2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            IdUsuario = new Guid("a9b8c7d6-2e3f-4a5b-8c9d-1e2f3a4b5c6d"),
                            Numero = "1",
                            Total = 45.99m
                        },
                        new
                        {
                            IdPedido = new Guid("d0c1e2f3-a4b5-c6d7-e8f9-a0b1c2d3e4f5"),
                            Estado = "Enviado",
                            FechaCreacion = new DateTime(2025, 6, 13, 14, 15, 40, 290, DateTimeKind.Local).AddTicks(8309),
                            IdDireccion = new Guid("2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            IdUsuario = new Guid("a9b8c7d6-2e3f-4a5b-8c9d-1e2f3a4b5c6d"),
                            Numero = "2",
                            Total = 89.50m
                        });
                });

            modelBuilder.Entity("NickYMartinApi.Models.Producto", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("MainImagenUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainTrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdProducto");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            IdProducto = new Guid("c8d9e0f1-2a3b-4c5d-8e6f-9a0b1c2d3e4f"),
                            Descripcion = "Camiseta de manga corta, 100% algodón suave.",
                            FechaActualizacion = new DateTime(2023, 4, 18, 10, 25, 40, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1966, 11, 24, 7, 34, 51, 0, DateTimeKind.Unspecified),
                            Nombre = "Camiseta Básica Algodón",
                            Precio = 19.99m,
                            Stock = 100
                        },
                        new
                        {
                            IdProducto = new Guid("f2e3d4c5-6b7a-8d9e-0c1f-2a3b4c5d6e7f"),
                            Descripcion = "Pantalón vaquero clásico de corte recto.",
                            FechaActualizacion = new DateTime(2020, 7, 3, 14, 1, 55, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1973, 1, 10, 18, 56, 12, 0, DateTimeKind.Unspecified),
                            Nombre = "Pantalón Vaquero Recto",
                            Precio = 49.99m,
                            Stock = 50
                        },
                        new
                        {
                            IdProducto = new Guid("a0b1c2d3-4e5f-6a7b-8c9d-0e1f2a3b4c5d"),
                            Descripcion = "Zapatillas cómodas y con estilo para el día a día.",
                            FechaActualizacion = new DateTime(2024, 1, 5, 20, 15, 30, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Zapatillas Deportivas Urbanas",
                            Precio = 79.99m,
                            Stock = 75
                        },
                        new
                        {
                            IdProducto = new Guid("d4c5b6a7-8f9e-0c1d-2a3b-4c5d6e7f8a9b"),
                            Descripcion = "Bolso de cuero genuino con múltiples compartimentos.",
                            FechaActualizacion = new DateTime(2025, 6, 14, 18, 32, 49, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1989, 7, 15, 3, 40, 20, 0, DateTimeKind.Unspecified),
                            Nombre = "Bolso de Cuero Grande",
                            Precio = 129.99m,
                            Stock = 20
                        },
                        new
                        {
                            IdProducto = new Guid("e5f6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b"),
                            Descripcion = "Gafas de sol con lentes polarizadas para una visión clara.",
                            FechaActualizacion = new DateTime(2022, 11, 9, 8, 50, 5, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1945, 5, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Gafas de Sol Polarizadas",
                            Precio = 59.99m,
                            Stock = 60
                        },
                        new
                        {
                            IdProducto = new Guid("b0a9c8d7-1f2e-3a4b-5c6d-7e8f9a0b1c2d"),
                            Descripcion = "Una emocionante novela de fantasía y aventuras.",
                            FechaActualizacion = new DateTime(2021, 2, 20, 17, 7, 10, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1998, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            Nombre = "Libro 'Aventuras Épicas'",
                            Precio = 12.50m,
                            Stock = 150
                        },
                        new
                        {
                            IdProducto = new Guid("d1c2b3a4-5f6e-7a8b-9c0d-1e2f3a4b5c6d"),
                            Descripcion = "Taza de cerámica de alta calidad con diseño único.",
                            FechaActualizacion = new DateTime(2023, 9, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1905, 3, 17, 14, 22, 5, 0, DateTimeKind.Unspecified),
                            Nombre = "Taza de Cerámica Decorada",
                            Precio = 8.99m,
                            Stock = 200
                        },
                        new
                        {
                            IdProducto = new Guid("e2f3a4b5-6c7d-8e9f-0a1b-2c3d4e5f6a7b"),
                            Descripcion = "Funda resistente para proteger tu teléfono de golpes y arañazos.",
                            FechaActualizacion = new DateTime(2020, 4, 12, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1981, 9, 2, 9, 10, 30, 0, DateTimeKind.Unspecified),
                            Nombre = "Funda Protectora para Smartphone",
                            Precio = 24.99m,
                            Stock = 120
                        },
                        new
                        {
                            IdProducto = new Guid("a3b4c5d6-7e8f-9a0b-1c2d-3e4f5a6b7c8d"),
                            Descripcion = "Reloj elegante con correa de cuero y movimiento de cuarzo.",
                            FechaActualizacion = new DateTime(2024, 8, 25, 21, 45, 22, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1920, 2, 29, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Reloj de Pulsera Clásico",
                            Precio = 99.99m,
                            Stock = 30
                        },
                        new
                        {
                            IdProducto = new Guid("f4e5d6c7-8b9a-0c1d-2e3f-4a5b6c7d8e9f"),
                            Descripcion = "Auriculares con conexión Bluetooth y sonido de alta fidelidad.",
                            FechaActualizacion = new DateTime(2021, 10, 30, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaCreacion = new DateTime(1950, 6, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Auriculares Inalámbricos Bluetooth",
                            Precio = 69.99m,
                            Stock = 80
                        });
                });

            modelBuilder.Entity("NickYMartinApi.Models.ProductoCategoria", b =>
                {
                    b.Property<Guid>("IdProductoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProductoCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdProducto");

                    b.ToTable("ProductosCategorias");

                    b.HasData(
                        new
                        {
                            IdProductoCategoria = new Guid("f9e8d7c6-5b4a-3f2e-1d0c-9b8a7f6e5d4c"),
                            IdCategoria = new Guid("1a2b3c4d-5e6f-4a7b-8c9d-0e1f2a3b4c5d"),
                            IdProducto = new Guid("c8d9e0f1-2a3b-4c5d-8e6f-9a0b1c2d3e4f")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            IdCategoria = new Guid("1a2b3c4d-5e6f-4a7b-8c9d-0e1f2a3b4c5d"),
                            IdProducto = new Guid("f2e3d4c5-6b7a-8d9e-0c1f-2a3b4c5d6e7f")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("4e3d2c1b-a0f9-8e7d-6c5b-4a3f2e1d0c9b"),
                            IdCategoria = new Guid("b2c3d4e5-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            IdProducto = new Guid("a0b1c2d3-4e5f-6a7b-8c9d-0e1f2a3b4c5d")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("8a9b0c1d-2e3f-4a5b-6c7d-8e9f0a1b2c3d"),
                            IdCategoria = new Guid("b8c9d0e1-2f3a-4b5c-6d7e-8f9a0b1c2d3e"),
                            IdProducto = new Guid("a0b1c2d3-4e5f-6a7b-8c9d-0e1f2a3b4c5d")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("6d5e4f3a-2b1c-4d0e-8f7a-9b8c7d6e5f4a"),
                            IdCategoria = new Guid("c3d4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            IdProducto = new Guid("d4c5b6a7-8f9e-0c1d-2a3b-4c5d6e7f8a9b")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            IdCategoria = new Guid("c9d0e1f2-3a4b-5c6d-7e8f-9a0b1c2d3e4f"),
                            IdProducto = new Guid("d4c5b6a7-8f9e-0c1d-2a3b-4c5d6e7f8a9b")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("7c8b9a0f-1e2d-3c4b-5a6f-7e8d9c0b1a2f"),
                            IdCategoria = new Guid("c3d4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            IdProducto = new Guid("e5f6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("c0d1e2f3-a4b5-c6d7-e8f9-a0b1c2d3e4f5"),
                            IdCategoria = new Guid("e5f6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b"),
                            IdProducto = new Guid("b0a9c8d7-1f2e-3a4b-5c6d-7e8f9a0b1c2d")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("5f6a7b8c-9d0e-1f2a-3b4c-5d6e7f8a9b0c"),
                            IdCategoria = new Guid("d4e5f6a7-8b9c-0d1e-2f3a-4b5c6d7e8f9a"),
                            IdProducto = new Guid("d1c2b3a4-5f6e-7a8b-9c0d-1e2f3a4b5c6d")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("9e0d1c2b-3a4f-5e6d-7c8b-9a0f1e2d3c4b"),
                            IdCategoria = new Guid("f6a7b8c9-0d1e-2f3a-4b5c-6d7e8f9a0b1c"),
                            IdProducto = new Guid("e2f3a4b5-6c7d-8e9f-0a1b-2c3d4e5f6a7b")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("0a1b2c3d-4e5f-6a7b-8c9d-0e1f2a3b4c5d"),
                            IdCategoria = new Guid("a7b8c9d0-1e2f-3a4b-5c6d-7e8f9a0b1c2d"),
                            IdProducto = new Guid("e2f3a4b5-6c7d-8e9f-0a1b-2c3d4e5f6a7b")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("e1f2a3b4-c5d6-e7f8-a9b0-c1d2e3f4a5b6"),
                            IdCategoria = new Guid("c3d4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            IdProducto = new Guid("a3b4c5d6-7e8f-9a0b-1c2d-3e4f5a6b7c8d")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("3d4e5f6a-7b8c-9d0e-1f2a-3b4c5d6e7f8a"),
                            IdCategoria = new Guid("d0e1f2a3-4b5c-6d7e-8f9a-0b1c2d3e4f5a"),
                            IdProducto = new Guid("a3b4c5d6-7e8f-9a0b-1c2d-3e4f5a6b7c8d")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("b7c8d9e0-1f2a-3b4c-5d6e-7f8a9b0c1d2e"),
                            IdCategoria = new Guid("f6a7b8c9-0d1e-2f3a-4b5c-6d7e8f9a0b1c"),
                            IdProducto = new Guid("f4e5d6c7-8b9a-0c1d-2e3f-4a5b6c7d8e9f")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("c8d9e0f1-2a3b-4c5d-6e7f-8a9b0c1d2e3f"),
                            IdCategoria = new Guid("a7b8c9d0-1e2f-3a4b-5c6d-7e8f9a0b1c2d"),
                            IdProducto = new Guid("f4e5d6c7-8b9a-0c1d-2e3f-4a5b6c7d8e9f")
                        });
                });

            modelBuilder.Entity("NickYMartinApi.Models.Role", b =>
                {
                    b.Property<Guid>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RolId = new Guid("a7b9c28d-456e-4f1a-b890-3c5d6e7f8a91"),
                            NombreRol = "Admin"
                        },
                        new
                        {
                            RolId = new Guid("1c3f5e7a-8b9d-4e2c-9a3b-6f8d7c5e3a21"),
                            NombreRol = "Staff"
                        },
                        new
                        {
                            RolId = new Guid("e9a2b3c4-5d6f-4a8b-9c1d-2e4f6a8b7c93"),
                            NombreRol = "Cliente"
                        });
                });

            modelBuilder.Entity("NickYMartinApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8d7e9f0-1a2b-4c3d-8e5f-7a9b1c3d5e7f"),
                            Email = "admin@nickymartin.com",
                            Name = "Paco Revilla",
                            PasswordHash = "AQAAAAIAAYagAAAAEI4teKyRLWGw0IE8AqeyRE79Mr8zKNoeMXArw/P5f7EQNqG3PGEVdY8twax2lOZZKw==",
                            RoleId = new Guid("a7b9c28d-456e-4f1a-b890-3c5d6e7f8a91")
                        },
                        new
                        {
                            Id = new Guid("f0e1d2c3-4b5a-8d6e-9c1f-2a3b4c5d6e7f"),
                            Email = "lucia.sanchiz@nickymartin.com",
                            Name = "Marta Gonzalez",
                            PasswordHash = "AQAAAAIAAYagAAAAEBzupCJlqa3R2Sz8Vo0hTqm7T9IG1lXN3YIlf2coB53B1VDTpRjKrjsjM1/LLw0MDA==",
                            RoleId = new Guid("1c3f5e7a-8b9d-4e2c-9a3b-6f8d7c5e3a21")
                        },
                        new
                        {
                            Id = new Guid("a9b8c7d6-2e3f-4a5b-8c9d-1e2f3a4b5c6d"),
                            Email = "laura.gomez@gmail.com",
                            Name = "Laura Gomez",
                            PasswordHash = "AQAAAAIAAYagAAAAEEmsXx6ToMcEX2xiskUFwYxi2dcC6LChHVgoy+9QFY+rGpL4v8Z3rSsxmZ5YnsaoiA==",
                            RoleId = new Guid("e9a2b3c4-5d6f-4a8b-9c1d-2e4f6a8b7c93")
                        });
                });

            modelBuilder.Entity("NickYMartinApi.Models.Valoracion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Puntuacion")
                        .HasColumnType("int");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Valoraciones");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Carrito", b =>
                {
                    b.HasOne("NickYMartinApi.Models.User", "Usuario")
                        .WithMany("Carritos")
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Comentario", b =>
                {
                    b.HasOne("NickYMartinApi.Models.Comentario", "ComentarioPadre")
                        .WithMany("Respuestas")
                        .HasForeignKey("ComentarioPadreId");

                    b.HasOne("NickYMartinApi.Models.Producto", "Producto")
                        .WithMany("Comentarios")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NickYMartinApi.Models.User", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComentarioPadre");

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("NickYMartinApi.Models.DetallesPedidos", b =>
                {
                    b.HasOne("NickYMartinApi.Models.Pedido", "Pedido")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NickYMartinApi.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Direccion", b =>
                {
                    b.HasOne("NickYMartinApi.Models.User", "Usuario")
                        .WithMany("Direcciones")
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Favorito", b =>
                {
                    b.HasOne("NickYMartinApi.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NickYMartinApi.Models.User", "Usuario")
                        .WithMany("Favoritos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("NickYMartinApi.Models.ItemCarrito", b =>
                {
                    b.HasOne("NickYMartinApi.Models.Carrito", "Carrito")
                        .WithMany("ItemsCarrito")
                        .HasForeignKey("IdCarrito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NickYMartinApi.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("NickYMartinApi.Models.MultimediaProducto", b =>
                {
                    b.HasOne("NickYMartinApi.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Pedido", b =>
                {
                    b.HasOne("NickYMartinApi.Models.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("IdDireccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NickYMartinApi.Models.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Direccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("NickYMartinApi.Models.ProductoCategoria", b =>
                {
                    b.HasOne("NickYMartinApi.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NickYMartinApi.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("NickYMartinApi.Models.User", b =>
                {
                    b.HasOne("NickYMartinApi.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Valoracion", b =>
                {
                    b.HasOne("NickYMartinApi.Models.Producto", "Producto")
                        .WithMany("Valoraciones")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NickYMartinApi.Models.User", "Usuario")
                        .WithMany("Valoraciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Carrito", b =>
                {
                    b.Navigation("ItemsCarrito");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Comentario", b =>
                {
                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Pedido", b =>
                {
                    b.Navigation("DetallesPedidos");
                });

            modelBuilder.Entity("NickYMartinApi.Models.Producto", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Valoraciones");
                });

            modelBuilder.Entity("NickYMartinApi.Models.User", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Comentarios");

                    b.Navigation("Direcciones");

                    b.Navigation("Favoritos");

                    b.Navigation("Valoraciones");
                });
#pragma warning restore 612, 618
        }
    }
}
